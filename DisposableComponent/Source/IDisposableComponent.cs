using System;

namespace DisposableComponent
{
    /// <summary>
    /// Provides an interface for disclosing to the outside world event notifications during the destruction process and
    /// flags indicating completion or non-completion of the destruction process.
    /// This is an extension of <see cref="IDisposable"/>.
    /// </summary>
    public interface IDisposableComponent : IDisposable
    {
        /// <summary>
        /// This event is generated by a call to <see cref="IDisposable"/>.
        /// It is called just before an object implementing this interface becomes unavailable (i.e., <see cref="IsDisposed"/> becomes true).
        /// </summary>
        /// <example>
        /// When considered with <see cref="Disposed"/>, this is the preferred form.
        /// <code>
        /// Disposing?.Invoke(this, new DisposableComponentEventArgs(this));
        /// IsDisposed = true;
        /// Disposed?.Invoke(this, new DisposableComponentEventArgs(this));
        /// </code>
        /// </example>
        event EventHandler<DisposableComponentEventArgs> Disposing;

        /// <summary>
        /// This event is generated by a call to <see cref="IDisposable"/>.
        /// It is called immediately after an object implementing this interface becomes unavailable (<see cref="IsDisposed"/> becomes true).
        /// </summary>
        /// <example>
        /// When considered with <see cref="Disposing"/>, this is the preferred form.
        /// <code>
        /// Disposing?.Invoke(this, new DisposableComponentEventArgs(this));
        /// IsDisposed = true;
        /// Disposed?.Invoke(this, new DisposableComponentEventArgs(this));
        /// </code>
        /// </example>
        event EventHandler<DisposableComponentEventArgs> Disposed;

        /// <summary>
        /// Gets whether the object has been destroyed.
        /// After calling the <see cref="Dispose"/> method, this property always returns false.
        /// </summary>
        /// <remarks>
        /// Objects implementing this interface must update this flag in <see cref="Dispose"/>.
        /// </remarks>
        bool IsDisposed { get; }

        /// <summary>
        /// Calls the object destruction process.
        /// After this function is called, this object cannot be used.
        /// </summary>
        /// <seealso cref="IDisposable.Dispose"/>
        /// <remarks>
        /// Objects implementing this interface shall update <see cref="IsDisposed"/> in this method.
        /// </remarks>
        new void Dispose();
    }
}